/*
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/esp32-microsd-card-arduino/
  
  This sketch can be found at: Examples > SD(esp32) > SD_Test
*/

#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_INA219.h>
#include <Adafruit_MCP4728.h>

Adafruit_INA219 ina219;
Adafruit_MCP4728 mcp;
#define DAC_CH1 26
#define DAC_CH2 25

#include "FS.h"
#include "SD.h"
#include "SPI.h"

#include <Adafruit_GPS.h>
Adafruit_GPS GPS(&Wire);
#define GPSECHO false
uint32_t timer = millis();

void listDir(fs::FS &fs, const char * dirname, uint8_t levels){
  Serial.printf("Listing directory: %s\n", dirname);

  File root = fs.open(dirname);
  if(!root){
    Serial.println("Failed to open directory");
    return;
  }
  if(!root.isDirectory()){
    Serial.println("Not a directory");
    return;
  }

  File file = root.openNextFile();
  while(file){
    if(file.isDirectory()){
      Serial.print("  DIR : ");
      Serial.println(file.name());
      if(levels){
        listDir(fs, file.name(), levels -1);
      }
    } else {
      Serial.print("  FILE: ");
      Serial.print(file.name());
      Serial.print("  SIZE: ");
      Serial.println(file.size());
    }
    file = root.openNextFile();
  }
}

void createDir(fs::FS &fs, const char * path){
  Serial.printf("Creating Dir: %s\n", path);
  if(fs.mkdir(path)){
    Serial.println("Dir created");
  } else {
    Serial.println("mkdir failed");
  }
}

void removeDir(fs::FS &fs, const char * path){
  Serial.printf("Removing Dir: %s\n", path);
  if(fs.rmdir(path)){
    Serial.println("Dir removed");
  } else {
    Serial.println("rmdir failed");
  }
}

void readFile(fs::FS &fs, const char * path){
  Serial.printf("Reading file: %s\n", path);

  File file = fs.open(path);
  if(!file){
    Serial.println("Failed to open file for reading");
    return;
  }

  Serial.print("Read from file: ");
  while(file.available()){
    Serial.write(file.read());
  }
  file.close();
}

void writeFile(fs::FS &fs, const char * path, const char * message){
  Serial.printf("Writing file: %s\n", path);

  File file = fs.open(path, FILE_WRITE);
  if(!file){
    Serial.println("Failed to open file for writing");
    return;
  }
  if(file.print(message)){
    Serial.println("File written");
  } else {
    Serial.println("Write failed");
  }
  file.close();
}

void appendFile(fs::FS &fs, const char * path, const char * message){
  Serial.printf("Appending to file: %s\n", path);

  File file = fs.open(path, FILE_APPEND);
  if(!file){
    Serial.println("Failed to open file for appending");
    return;
  }
  if(file.print(message)){
      Serial.println("Message appended");
  } else {
    Serial.println("Append failed");
  }
  file.close();
}

void renameFile(fs::FS &fs, const char * path1, const char * path2){
  Serial.printf("Renaming file %s to %s\n", path1, path2);
  if (fs.rename(path1, path2)) {
    Serial.println("File renamed");
  } else {
    Serial.println("Rename failed");
  }
}

void deleteFile(fs::FS &fs, const char * path){
  Serial.printf("Deleting file: %s\n", path);
  if(fs.remove(path)){
    Serial.println("File deleted");
  } else {
    Serial.println("Delete failed");
  }
}

void testFileIO(fs::FS &fs, const char * path){
  File file = fs.open(path);
  static uint8_t buf[512];
  size_t len = 0;
  uint32_t start = millis();
  uint32_t end = start;
  if(file){
    len = file.size();
    size_t flen = len;
    start = millis();
    while(len){
      size_t toRead = len;
      if(toRead > 512){
        toRead = 512;
      }
      file.read(buf, toRead);
      len -= toRead;
    }
    end = millis() - start;
    Serial.printf("%u bytes read for %u ms\n", flen, end);
    file.close();
  } else {
    Serial.println("Failed to open file for reading");
  }


  file = fs.open(path, FILE_WRITE);
  if(!file){
    Serial.println("Failed to open file for writing");
    return;
  }

  size_t i;
  start = millis();
  for(i=0; i<2048; i++){
    file.write(buf, 512);
  }
  end = millis() - start;
  Serial.printf("%u bytes written for %u ms\n", 2048 * 512, end);
  file.close();
}

void setup(){
  Serial.begin(115200);
  if(!SD.begin(5)){
    Serial.println("Card Mount Failed");
    return;
  }
  GPS.begin(0x10);
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA); 
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
  GPS.sendCommand(PGCMD_ANTENNA);
  delay(1000);
  GPS.println(PMTK_Q_RELEASE);

  ina219.begin();
  mcp.begin(0x60);
  uint8_t cardType = SD.cardType();
  if(cardType == CARD_NONE){
    Serial.println("No SD card attached");
    return;
  }
  
  Serial.println("Hello!");
  Serial.println("Adafruit MCP4728 test!");
  Serial.println("Adafruit INA219 test!");

  if (!ina219.begin()) {
    Serial.println("Failed to find INA219 chip");
    while (1) { delay(10); }
  }

  ina219.setCalibration_16V_400mA();

  if (!mcp.begin()){

    Serial.println("Failed to find MCP4728 chip");
    while (1) {
      delay(10);
    }
  }
  mcp.setChannelValue(MCP4728_CHANNEL_A, 4095);
  mcp.setChannelValue(MCP4728_CHANNEL_B, 2048);
  mcp.setChannelValue(MCP4728_CHANNEL_C, 1024);
  mcp.setChannelValue(MCP4728_CHANNEL_D, 0);
  Serial.print("SD Card Type: ");
  if(cardType == CARD_MMC){
    Serial.println("MMC");
  } else if(cardType == CARD_SD){
    Serial.println("SDSC");
  } else if(cardType == CARD_SDHC){
    Serial.println("SDHC");
  } else {
    Serial.println("UNKNOWN");
  }

  uint64_t cardSize = SD.cardSize() / (1024 * 1024);
  Serial.printf("SD Card Size: %lluMB\n", cardSize);

  // listDir(SD, "/", 0);
  // createDir(SD, "/mydir");
  // listDir(SD, "/", 0);
  // removeDir(SD, "/mydir");
  // listDir(SD, "/", 2);
  // writeFile(SD, "/hello.txt", "Hello ");
  // appendFile(SD, "/hello.txt", "World!\n");
  // readFile(SD, "/hello.txt");
  // deleteFile(SD, "/foo.txt");
  // renameFile(SD, "/hello.txt", "/foo.txt");
  // readFile(SD, "/foo.txt");
  // testFileIO(SD, "/test.txt");
  // Serial.printf("Total space: %lluMB\n", SD.totalBytes() / (1024 * 1024));
  // Serial.printf("Used space: %lluMB\n", SD.usedBytes() / (1024 * 1024));
}

void loop(){
  char c = GPS.read();
  // if you want to debug, this is a good time to do it!
  if (GPSECHO)
    if (c) Serial.print(c);
  // if a sentence is received, we can check the checksum, parse it...
  if (GPS.newNMEAreceived()) {
    // a tricky thing here is if we print the NMEA sentence, or data
    // we end up not listening and catching other sentences!
    // so be very wary if using OUTPUT_ALLDATA and trying to print out data
    Serial.println(GPS.lastNMEA()); // this also sets the newNMEAreceived() flag to false
    if (!GPS.parse(GPS.lastNMEA())) // this also sets the newNMEAreceived() flag to false
      return; // we can fail to parse a sentence in which case we should just wait for another
  }

  // approximately every 2 seconds or so, print out the current stats
  if (millis() - timer > 2000) {
    timer = millis(); // reset the timer
    Serial.print("\nTime: ");
    if (GPS.hour < 10) { Serial.print('0'); }
    Serial.print(GPS.hour, DEC); Serial.print(':');
    if (GPS.minute < 10) { Serial.print('0'); }
    Serial.print(GPS.minute, DEC); Serial.print(':');
    if (GPS.seconds < 10) { Serial.print('0'); }
    Serial.print(GPS.seconds, DEC); Serial.print('.');
    if (GPS.milliseconds < 10) {
      Serial.print("00");
    } else if (GPS.milliseconds > 9 && GPS.milliseconds < 100) {
      Serial.print("0");
    }
    // Serial.println(GPS.milliseconds);
    Serial.print("Date: ");
    Serial.print(GPS.day, DEC); Serial.print('/');
    Serial.print(GPS.month, DEC); Serial.print("/20");
    Serial.println(GPS.year, DEC);
    Serial.print("Fix: "); Serial.print((int)GPS.fix);
    Serial.print(" quality: "); Serial.println((int)GPS.fixquality);
    if (GPS.fix) {
      Serial.print("Location: ");
      Serial.print(GPS.latitude, 4); Serial.print(GPS.lat);
      Serial.print(", ");
      Serial.print(GPS.longitude, 4); Serial.println(GPS.lon);
      Serial.print("Speed (knots): "); Serial.println(GPS.speed);
      Serial.print("Angle: "); Serial.println(GPS.angle);
      Serial.print("Altitude: "); Serial.println(GPS.altitude);
      Serial.print("Satellites: "); Serial.println((int)GPS.satellites);
    }
  }
  if (GPS.altitude > 15){ //This will be changed to 15km once actually running
  Serial.print("The countdown to run the curves has started");
  delay(30000);
  MeasureAndRecordData();
  }
}

void MeasureAndRecordData(){
  float shuntvoltage = 0;
  float busvoltage = 0;
  float current_mA = 0;
  float loadvoltage = 0;
  float power_mW = 0;
  writeFile(SD, "/GaN Data.csv", "Vg DAC, Vd DAC, Shunt Voltage, Bus Voltage, Current, Load Voltage\n");


  for(int j=0;j<4096;j+=50){//steps up Vd after each transfer curve
    mcp.setChannelValue(MCP4728_CHANNEL_C,j);
    for(int i=0;i<4096;i+=100){ //sweeps Vg from -8 to 3V
      shuntvoltage = ina219.getShuntVoltage_mV();
      busvoltage = ina219.getBusVoltage_V();
      current_mA = ina219.getCurrent_mA()/10;
      power_mW = ina219.getPower_mW();
      loadvoltage = busvoltage + (shuntvoltage / 1000);
      // char buffer[50]; // Create a buffer to store the converted strings
      // snprintf(buffer, sizeof(buffer), "%d,%d,%.2f,%.2f,%.2f,%.2f\n", i, j, shuntvoltage, busvoltage, current_mA, loadvoltage);
      // appendFile(SD, "/data.csv", buffer);
      File dataFile = SD.open("/GaN Data.csv", FILE_APPEND);
      if (dataFile) {
        char buffer[100];// Format the data as a CSV row
        snprintf(buffer, sizeof(buffer), "%d,%d,%.2f,%.2f,%.4f,%.2f\n", i, j, shuntvoltage, busvoltage, current_mA, loadvoltage);
        dataFile.print(buffer);// Write the data to the file
        dataFile.close();// Close the file
      } else {
        Serial.println("Error opening /data.csv");
      }
      // char buffer[20]; // Create a buffer to store the converted strings
      // snprintf(buffer, sizeof(buffer), "%d", i);
      // char* stri = buffer;
      // snprintf(buffer, sizeof(buffer), "%d", j);
      // char* strj = buffer;
      // snprintf(buffer, sizeof(buffer), "%.2f", shuntvoltage);
      // char* strshunt = buffer;
      // snprintf(buffer, sizeof(buffer), "%.2f", busvoltage);
      // char* strbus = buffer;
      // snprintf(buffer, sizeof(buffer), "%.2f", current_mA);
      // char* strcurrent = buffer;
      // snprintf(buffer, sizeof(buffer), "%.2f", loadvoltage);
      // char* strload = buffer;
      // const char* stri = i;
      // const char* strj = j;
      // const char* strshunt = shuntvoltage;
      // const char* strbus = busvoltage;
      // const char* strcurrent = current_mA;
      // const char* strload = loadvoltage;

      mcp.setChannelValue(MCP4728_CHANNEL_D,i);
      Serial.print("DAC Value Vg ");
      Serial.println(i);
      // Serial.print("\n");
      Serial.print("DAC Value Vd ");
      Serial.println(j);
      // Serial.print("\n");
      // delay(20);
      Serial.print("Bus Voltage:   "); Serial.print(busvoltage); Serial.println(" V");
      Serial.print("Shunt Voltage: "); Serial.print(shuntvoltage); Serial.println(" mV");
      Serial.print("Load Voltage:  "); Serial.print(loadvoltage); Serial.println(" V");
      Serial.print("Current:       "); Serial.print(current_mA,4); Serial.println(" mA");
      // Serial.print("Power:         "); Serial.print(power_mW); Serial.println(" mW");
      Serial.println("\n");
      delay(200);
      
      // appendFile(SD, "/GaN Data.csv", "Vg DAC:  ");appendFile(SD, "/GaN Data.csv", stri);appendFile(SD, "/GaN Data.csv", "\n");
      // appendFile(SD, "/GaN Data.csv", "Vd DAC:  ");appendFile(SD, "/GaN Data.csv", strj);appendFile(SD, "/GaN Data.csv", "\n");
      // appendFile(SD, "/GaN Data.csv", "Bus Voltage:   ");appendFile(SD, "/GaN Data.csv", strbus);appendFile(SD, "/GaN Data.csv", " V");appendFile(SD, "/GaN Data.csv", "\n");
      // appendFile(SD, "/GaN Data.csv", "Shunt Voltage:   ");appendFile(SD, "/GaN Data.csv", strshunt);appendFile(SD, "/GaN Data.csv", " V");appendFile(SD, "/GaN Data.csv", "\n");
      // appendFile(SD, "/GaN Data.csv", "Load Voltage:   ");appendFile(SD, "/GaN Data.csv", strload);appendFile(SD, "/GaN Data.csv", " V");appendFile(SD, "/GaN Data.csv", "\n");
      // appendFile(SD, "/GaN Data.csv", "Current:   ");appendFile(SD, "/GaN Data.csv", strcurrent);appendFile(SD, "/GaN Data.csv", " mA");appendFile(SD, "/GaN Data.csv", "\n");
      // appendFile(SD, "/GaN Data.csv", "\n\n");
      // appendFile(SD, "/Test.txt", ");
      // readFile(SD, "/Test.txt");
    }
    delay(5000);
    Serial.printf("Total space: %lluMB\n", SD.totalBytes() / (1024 * 1024));
    Serial.printf("Used space: %lluMB\n", SD.usedBytes() / (1024 * 1024));
  }
}
