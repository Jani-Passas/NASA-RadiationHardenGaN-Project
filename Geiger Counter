#include <SD.h>
#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_INA219.h>
#include <Adafruit_MCP4728.h>

const int SDpin = 10;
const int nInterrupt = 0;
const int interruptPin = 2;
int holder = 0;

volatile int knt = 0, counter = 0;
long unsigned int millis_start, M;
int i = 1;
int title = 1;
int sec_counter = 0;
int min_counter = 0;
int hour_counter = 0;
int day_counter = 0;

int sec_geiger_counter = 0;
int min_geiger_counter = 0;
int hour_geiger_counter = 0;
int day_geiger_counter = 0;

double total_cps = 0.0;
double total_cpm = 0.0;
double total_cph = 0.0;

unsigned long lastSecondMillis = 0;
unsigned long lastMinuteMillis = 0;
unsigned long lastHourMillis = 0;
unsigned long lastDayMillis = 0;


void setup() {
  Serial.begin(9600);
  if (!SD.begin(SDpin)) {
    Serial.println("Card failed.");
    while (true); // Halts the program
  }
  pinMode(interruptPin, INPUT_PULLUP);
  attachInterrupt(nInterrupt, isr, RISING);
  millis_start = millis();
  Serial.println("Starting to run now\n");
}

void isr() { // interrupt service routine
  counter = knt;
  sec_geiger_counter ++;
  min_geiger_counter ++;
  hour_geiger_counter ++;
  day_geiger_counter ++;
  knt++;
  M = millis();
}

void loop() {
  if ((M - millis_start) > (60000L * i) && counter != knt) {
    RecordGeigerData();
    holder = 1;
  }

  unsigned long currentMillis = millis();
  if (currentMillis - lastSecondMillis >= 1000) {
    sec_counter++;
  }

  // Reset CPS every minute
  if (currentMillis - lastMinuteMillis >= 60000 && holder == 1) {
    lastMinuteMillis = currentMillis;
    total_cps = double(sec_geiger_counter) / 60;
    sec_geiger_counter = 0;
    min_counter++;
    holder = 0;
  }

  // Reset CPM every hour
  if (currentMillis - lastHourMillis >= 3600000 && holder == 1) {
    lastHourMillis = currentMillis;
    total_cpm = double(min_geiger_counter) / 3600;
    min_geiger_counter = 0;
    hour_counter++;
    holder = 0;
  }

  // Reset CPH every day
  if (currentMillis - lastDayMillis >= 86400000 && holder == 1) {
    lastDayMillis = currentMillis;
    total_cph = double(hour_geiger_counter) / 86400;
    hour_geiger_counter = 0;
    day_counter++;
    holder = 0;
  }
}

void RecordGeigerData() {
  double sec_passed = (double(M - millis_start)) / 1000;
  double min_passed = (double(M - millis_start)) / 60000;
  double hour_passed = (double(M - millis_start)) / 3600000;
  double avg_s = knt / sec_passed;
  double avg_m = total_cpm / min_passed;
  double avg_h = total_cph / hour_passed;    

  File GeigerFile;
  String Geiger_filename = "Geiger.csv";
  GeigerFile = SD.open(Geiger_filename, FILE_WRITE);


  String Geiger_header = "Running Time (s), Running Time (min), Running Time (hours), Counts in last min, Counts in last hour, counts in last day, Total Counts, Time (s), Time(min), Time (hours), Time (days), CPS, CPM, CPH";
  String dataRow = String(sec_passed, 2) + "," + String(min_passed, 3) + "," + String(hour_passed, 4) + "," + String(sec_geiger_counter) + "," + String(min_geiger_counter) + "," + String(hour_geiger_counter) + "," + String(knt) + "," + String(sec_counter, 2) + "," + String(min_counter, 2) + "," + String(hour_counter, 2) + "," + String(day_counter) + "," + String(total_cps, 2) + "," + String(total_cpm, 3) + "," + String(total_cph, 4);

  if (GeigerFile) {
    if (title == 1) {
      GeigerFile.println(Geiger_header);
      title = 2;
    }
    GeigerFile.println(dataRow);
    GeigerFile.close();
    Serial.print("Data written to: ");
    Serial.print(Geiger_filename);
  } else {
    Serial.print("Error opening file: ");
    Serial.println(Geiger_filename);
  }

  Serial.print("\nRunning time is ");
  Serial.print(sec_passed, 2);
  Serial.print(" seconds");
  Serial.print("\nRunning time in minutes is ");
  Serial.print(min_passed, 3);
  Serial.print(" minutes");
  Serial.print("\nRunning time in hours is ");
  Serial.print(hour_passed, 4);
  Serial.print(" hours");
  Serial.print("\nTotal counts is ");
  Serial.print(knt);
  Serial.print("\nCounts in last min: ");
  Serial.println(sec_geiger_counter);
  Serial.print("Counts in last hour: ");
  Serial.println(min_geiger_counter);
  Serial.print("Counts in last day: ");
  Serial.println(hour_geiger_counter);
  Serial.print("Total CPS is ");
  Serial.print(total_cps);
  Serial.print("\nTotal CPM is ");
  Serial.print(total_cpm);
  Serial.print("\nTotal CPH is ");
  Serial.print(total_cph);
  Serial.print("\n");

  counter++;
  i++;
}
