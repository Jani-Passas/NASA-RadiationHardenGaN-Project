#include <SD.h>
#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_INA219.h>
#include <Adafruit_MCP4728.h>

//Initialize variables
const int SDpin = 10; //arduino pin connection for SD card
const int nInterrupt = 0;
const int interruptPin = 2; //arduino pin for interrupt
int holder = 0;

volatile int knt = 0, counter = 0;
long unsigned int millis_start, M, SEC, MIN, HOUR;
int i = 1;
int title = 1;
double sec_counter = 0;
double min_counter = 0;
double hour_counter = 0;
double day_counter = 0;

int sec_geiger_counter = 0;
int min_geiger_counter = 0;
int hour_geiger_counter = 0;
int day_geiger_counter = 0;

double total_cps = 0.0;
double total_cpm = 0.0;
double total_cph = 0.0;

unsigned long lastSecondMillis = 0;
unsigned long lastMinuteMillis = 0;
unsigned long lastHourMillis = 0;
unsigned long lastDayMillis = 0;


void setup() {
  Serial.begin(9600);
  if (!SD.begin(SDpin)) {//SD card setup needed to run rest of code
    Serial.println("Card failed.");
    while (true);
  }
  pinMode(interruptPin, INPUT_PULLUP);//start interrupt setup
  attachInterrupt(nInterrupt, isr, RISING);
  millis_start = millis(); //millis timer
  Serial.println("Starting to run now\n");
}

void isr() { //interrupt occurance from arduino/geiger
  //counts increases
  counter = knt;
  sec_geiger_counter ++;
  min_geiger_counter ++;
  hour_geiger_counter ++;
  day_geiger_counter ++;
  knt++; //total counts goes up
  //reset millis timers
  M = millis();
  SEC = millis();
  MIN = millis();
  HOUR = millis();
}

void loop() {
  if ((M - millis_start) > (60000L * i) && counter != knt) {//every minute, once an occurance happens, call RecordGeigerData function and set holder to 1
    RecordGeigerData();
    holder = 1;
  }

  unsigned long currentMillis = millis();
  if (currentMillis - lastSecondMillis >= 1000) { //increase sec counter every second passed
    sec_counter++;
  }

  // Reset CPS every minute
  if (currentMillis - lastMinuteMillis >= 60000 && holder == 1) {//every minute and when the holder is 1 (after recording data)
    lastMinuteMillis = currentMillis;//reset timer comparison
    SEC = millis_start;
    // total_cps = double(sec_geiger_counter) / 60;
    sec_geiger_counter = 0; //reset geiger counter for seconds
    // min_counter++;
    holder = 0; //reset holder variable
  }

  // Reset CPM every hour
  if (currentMillis - lastHourMillis >= 3600000 && holder == 1) {
    lastHourMillis = currentMillis;
    MIN = millis_start;
    // total_cpm = double(min_geiger_counter) / 3600;
    min_geiger_counter = 0;
    // hour_counter++;
    holder = 0;
  }

  // Reset CPH every day
  if (currentMillis - lastDayMillis >= 86400000 && holder == 1) {
    lastDayMillis = currentMillis;
    HOUR = millis_start;
    // total_cph = double(hour_geiger_counter) / 86400;
    hour_geiger_counter = 0;
    // day_counter++;
    holder = 0;
  }
}

void RecordGeigerData() {
  //total time passed with very detailed information since a double
  double sec_passed = (double(M - millis_start)) / 1000;
  double min_passed = (double(M - millis_start)) / 60000;
  double hour_passed = (double(M - millis_start)) / 3600000;
  double sec_counter = (double(SEC - millis_start)) / 1000;
  double min_counter = (double(MIN - millis_start)) / 60000;
  double hour_counter = (double(HOUR - millis_start)) / 3600000;
  //these are total running average CPS, CPM, and CPH that is less helpful
  double avg_s = knt / sec_passed;
  double avg_m = total_cpm / min_passed;
  double avg_h = total_cph / hour_passed;

  // int sec_geiger_counter;
  // int min_geiger_counter;
  // int hour_geiger_counter;
  // int day_geiger_counter;  
  
  //this is resetting CPS,CPM, and CPH that is more helpful
  total_cps = double(sec_geiger_counter) / sec_counter;
  total_cpm = double(min_geiger_counter) / min_counter;
  total_cph = double(hour_geiger_counter) / hour_counter;

  //Create SD card file
  File GeigerFile;
  String Geiger_filename = "Geiger.csv";
  GeigerFile = SD.open(Geiger_filename, FILE_WRITE);

  //Header of what is in each column
  String Geiger_header = /*Running Time (s), Running Time (min), Running Time (hours),*/ "Counts in last min, Counts in last hour, counts in last day, Total Counts, Time (s), Time(min), Time (hours), Time (days), CPS, CPM, CPH";
  //Formatted string that creates new cells in a csv file
  String dataRow = /*String(sec_passed, 2) + "," + String(min_passed, 3) + "," + String(hour_passed, 4) + "," + */String(sec_geiger_counter) + "," + String(min_geiger_counter) + "," + String(hour_geiger_counter) + "," + String(knt) + "," + String(sec_counter, 2) + "," + String(min_counter, 2) + "," + String(hour_counter, 2) + "," + String(day_counter) + "," + String(total_cps, 2) + "," + String(total_cpm, 3) + "," + String(total_cph, 4);

  if (GeigerFile) {
    if (title == 1) {//only print the header the first time
      GeigerFile.println(Geiger_header);
      title = 2;
    }
    //print in the csv file the data and close it
    GeigerFile.println(dataRow);
    GeigerFile.close();
    Serial.print("Data written to: ");
    Serial.print(Geiger_filename);
  } else {
    Serial.print("Error opening file: ");
    Serial.println(Geiger_filename);
  }
  //Serial print to show user running on computer that code is working
  Serial.print("\nRunning time is ");
  Serial.print(sec_passed, 2);
  Serial.print(" seconds");
  Serial.print("\nRunning time in minutes is ");
  Serial.print(min_passed, 3);
  Serial.print(" minutes");
  Serial.print("\nRunning time in hours is ");
  Serial.print(hour_passed, 4);
  Serial.print(" hours");
  Serial.print("\nTotal counts is ");
  Serial.print(knt);
  Serial.print("\nCounts in last min: ");
  Serial.println(sec_geiger_counter);
  Serial.print("Counts in last hour: ");
  Serial.println(min_geiger_counter);
  Serial.print("Counts in last day: ");
  Serial.println(hour_geiger_counter);
  Serial.print("Total CPS is ");
  Serial.print(total_cps);
  Serial.print("\nTotal CPM is ");
  Serial.print(total_cpm);
  Serial.print("\nTotal CPH is ");
  Serial.println(total_cph);
  Serial.print("Current senconds: ");
  Serial.println(sec_counter);
  Serial.print("Current minutes: ");
  Serial.println(min_counter);
  Serial.print("Current hour: ");
  Serial.println(hour_counter);
  Serial.print("Current day: ");
  Serial.println(day_counter);
  Serial.print("\n");

  //increase the counters
  counter++;
  i++;
}
